name: Automated Windows Virtual Workspace (ngrok-in)

on:
  workflow_dispatch:
    inputs:
      iso_url:
        description: "Direct ISO link for the OS you want to install"
        required: true
        default: ""

jobs:
  run-vm:
    runs-on: ubuntu-latest
    timeout-minutes: 360 # 6 hours

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üß© Initializing Environment
        run: |
          echo "üîß Preparing Your Virtual Workspace (4 Cores ‚Ä¢ 16 GB RAM ‚Ä¢ 256 GB SSD)"
          sudo apt-get update -qq
          sudo apt-get install -y qemu-system qemu-utils wget curl unzip mtools
          mkdir -p $HOME/vm
          echo "‚úÖ Environment initialized."

      - name: üíæ Downloading ISO
        run: |
          echo "üì¶ Downloading ISO from provided link..."
          cd $HOME/vm
          wget --timeout=300 --tries=3 -O os.iso "${{ github.event.inputs.iso_url }}"
          if [ ! -f os.iso ]; then
            echo "‚ùå ISO download failed"
            exit 1
          fi
          ls -lh os.iso
          echo "‚úÖ ISO downloaded successfully."

      - name: üíΩ Creating 256 GB Virtual Disk
        run: |
          echo "üíΩ Creating 256 GB disk..."
          cd $HOME/vm
          qemu-img create -f qcow2 vm.qcow2 256G
          ls -lh vm.qcow2
          echo "‚úÖ Disk created."

      - name: üíæ Creating Automated Install Floppy
        run: |
          echo "ü§ñ Creating autounattend.xml for automated install..."
          cd $HOME/vm
          
          cat > autounattend.xml << 'XMLEOF'
<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend">
    <settings pass="windowsPE">
        <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <SetupUILanguage>
                <UILanguage>en-US</UILanguage>
            </SetupUILanguage>
            <InputLocale>en-US</InputLocale>
            <SystemLocale>en-US</SystemLocale>
            <UILanguage>en-US</UILanguage>
            <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <DiskConfiguration>
                <Disk wcm:action="add">
                    <CreatePartitions>
                        <CreatePartition wcm:action="add">
                            <Order>1</Order>
                            <Type>Primary</Type>
                            <Extend>true</Extend>
                        </CreatePartition>
                    </CreatePartitions>
                    <ModifyPartitions>
                        <ModifyPartition wcm:action="add">
                            <Order>1</Order>
                            <PartitionID>1</PartitionID>
                            <Letter>C</Letter>
                            <Format>NTFS</Format>
                            <Label>Windows</Label>
                        </ModifyPartition>
                    </ModifyPartitions>
                    <DiskID>0</DiskID>
                    <WillWipeDisk>true</WillWipeDisk>
                </Disk>
            </DiskConfiguration>
            <ImageInstall>
                <OSImage>
                    <InstallFrom>
                        <MetaData wcm:action="add">
                            <Key>/IMAGE/NAME</Key>
                            <Value>Windows 10 Pro</Value>
                        </MetaData>
                    </InstallFrom>
                    <InstallTo>
                        <DiskID>0</DiskID>
                        <PartitionID>1</PartitionID>
                    </InstallTo>
                    <InstallToAvailablePartition>false</InstallToAvailablePartition>
                </OSImage>
            </ImageInstall>
            <UserData>
                <ProductKey>
                    <Key></Key>
                </ProductKey>
                <AcceptEula>true</AcceptEula>
                <FullName>Admin</FullName>
                <Organization>GitHub</Organization>
            </UserData>
        </component>
    </settings>
    <settings pass="specialize">
        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <ComputerName>GITHUB-VM</ComputerName>
            <TimeZone>UTC</TimeZone>
        </component>
    </settings>
    <settings pass="oobeSystem">
        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <AutoLogon>
                <Password>
                    <Value>Password123!</Value>
                    <PlainText>true</PlainText>
                </Password>
                <Enabled>true</Enabled>
                <Username>Admin</Username>
            </AutoLogon>
            <OOBE>
                <HideEULAPage>true</HideEULAPage>
                <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>
                <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
                <NetworkLocation>Work</NetworkLocation>
                <ProtectYourPC>1</ProtectYourPC>
            </OOBE>
            <UserAccounts>
                <LocalAccounts>
                    <LocalAccount wcm:action="add">
                        <Password>
                            <Value>Password123!</Value>
                            <PlainText>true</PlainText>
                        </Password>
                        <Description>Admin User</Description>
                        <DisplayName>Admin</DisplayName>
                        <Group>Administrators</Group>
                        <Name>Admin</Name>
                    </LocalAccount>
                </LocalAccounts>
            </UserAccounts>
            <FirstLogonCommands>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>cmd /c "REG ADD \"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f"</CommandLine>
                    <Description>Enable RDP</Description>
                    <Order>1</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>cmd /c "Netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes"</CommandLine>
                    <Description>Enable RDP Firewall Rule</Description>
                    <Order>2</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
            </FirstLogonCommands>
        </component>
    </settings>
</unattend>
XMLEOF

          echo "üíø Creating floppy disk image..."
          qemu-img create -f raw floppy.img 1.44M
          sudo mkfs.vfat floppy.img
          sudo mcopy -i floppy.img autounattend.xml ::/
          sudo chmod 666 floppy.img
          echo "‚úÖ Floppy created with answer file."

      - name: üåê Setting Up ngrok (India Region)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          if [ -z "$NGROK_AUTH_TOKEN" ]; then
            echo "‚ùå Error: NGROK_AUTH_TOKEN secret is not set."
            echo "Please add your ngrok authtoken as a repository secret."
            exit 1
          fi
          
          echo "üîê Installing ngrok..."
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -qq
          sudo apt-get install -y ngrok
          
          echo "üîë Authenticating ngrok..."
          ngrok config add-authtoken "$NGROK_AUTH_TOKEN"
          
          echo "üîó Starting ngrok tunnels in Indian (in) region..."
          nohup ngrok tcp --region in 5901 > $HOME/vm/ngrok-vnc.log 2>&1 &
          nohup ngrok tcp --region in 3389 > $HOME/vm/ngrok-rdp.log 2>&1 &
          
          echo "‚úÖ ngrok setup done."

      - name: üñ•Ô∏è Launching VM
        run: |
          echo "üöÄ Booting Virtual Machine..."
          cd $HOME/vm
          
          nohup sudo qemu-system-x86_64 \
            -enable-kvm \
            -cpu host,kvm=on \
            -m 16G \
            -smp 4,sockets=1,cores=4,threads=1 \
            -drive file=vm.qcow2,format=qcow2,if=ide \
            -cdrom os.iso \
            -fda floppy.img \
            -vga qxl \
            -display vnc=:1 \
            -device qemu-xhci,id=xhci \
            -device usb-tablet,bus=xhci.0 \
            -netdev user,id=n0,hostfwd=tcp::3389-:3389,hostfwd=tcp::5901-:5901 \
            -device e1000,netdev=n0 \
            -daemonize > $HOME/vm/qemu.log 2>&1
          
          sleep 5
          echo "‚úÖ VM is running."
          echo "üåê RDP port 3389 forwarded ‚Üí Device port 3389"
          echo "üñ•Ô∏è  VNC port 5901 available"
          echo "üîç QEMU processes:"
          ps aux | grep qemu | grep -v grep

      - name: üìã Displaying Access Details
        run: |
          echo "Waiting 15s for ngrok tunnels to establish..."
          sleep 15
          
          echo "===================================================================="
          echo "‚úÖ Your VM is installing automatically!"
          echo ""
          echo "üìä VM SPECIFICATIONS:"
          echo "   ‚Ä¢ CPU: 4 cores"
          echo "   ‚Ä¢ RAM: 16 GB"
          echo "   ‚Ä¢ Storage: 256 GB"
          echo ""
          echo "üîê CREDENTIALS:"
          echo "   ‚Ä¢ User: Admin"
          echo "   ‚Ä¢ Pass: Password123!"
          echo ""
          echo "üîó ACCESS METHODS:"
          echo "   1. RDP: Port 3389 (local)"
          echo "   2. VNC: Port 5901 (local)"
          echo ""
          echo "üåê Find your ngrok endpoints here:"
          echo "   https://dashboard.ngrok.com/cloud-edge/endpoints"
          echo ""
          echo "‚ö†Ô∏è  Installation will take 20-30 minutes"
          echo "===================================================================="
          
          cat $HOME/vm/ngrok-vnc.log
          cat $HOME/vm/ngrok-rdp.log

      - name: ‚è≥ Keeping VM Active (6 Hours)
        run: |
          echo "üïê Keeping your virtual workspace alive for 6 hours..."
          echo ""
          
          for i in $(seq 1 360); do
            elapsed=$i
            remaining=$((360 - i))
            printf "\r‚è≥ Elapsed: %3d min | Remaining: %3d min" "$elapsed" "$remaining"
            sleep 60
          done
          
          echo -e "\n\nüí§ 6 hours elapsed ‚Äî session complete."
          echo "Shutting down VM..."

      - name: üõë Cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          sudo pkill -f qemu-system
          sudo pkill -f ngrok
          sleep 2
          echo "‚úÖ Cleanup complete"
