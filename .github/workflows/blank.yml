name: Windows 11 Debug Virtual Workspace

on:
  workflow_dispatch:

jobs:
  run-vm:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧩 Initializing Environment
        run: |
          echo "🔧 Preparing Your Virtual Workspace (4 Cores • 16 GB RAM • 256 GB SSD)"
          sudo apt update -qq
          sudo apt install -y qemu-kvm qemu-utils genisoimage wget curl unzip
          mkdir -p $HOME/vm
          echo "✅ Environment initialized."

      - name: 💾 Downloading Windows 11 ISO
        run: |
          echo "📦 Downloading official Windows 11 image..."
          cd $HOME/vm
          wget -O win11.iso "https://archive.org/download/windows-11-24h2-iso_202501/Win11_24H2_English_x64.iso"
          ls -lh win11.iso
          echo "✅ Windows 11 ISO retrieved."

      - name: 📜 Creating Autounattend ISO
        run: |
          echo "🧠 Creating unattended setup configuration..."
          cd $HOME/vm
          cp $GITHUB_WORKSPACE/.github/win/autounattend.xml ./autounattend.xml
          ls -la
          genisoimage -output autounattend.iso -volid AUTOUNATTEND -joliet -rock autounattend.xml
          ls -lh autounattend.iso
          echo "✅ Autounattend ISO ready."

      - name: 💽 Creating 256 GB Virtual Disk
        run: |
          echo "💽 Initializing 256 GB virtual disk..."
          cd $HOME/vm
          qemu-img create -f qcow2 win11.qcow2 256G
          ls -lh win11.qcow2
          echo "✅ Virtual disk created."

      - name: 🌐 Setting Up Tailscale (Manual Auth)
        run: |
          echo "🔐 Installing Tailscale..."
          curl -fsSL https://tailscale.com/install.sh | sh
          echo "🪄 Starting Tailscale — follow the login link below to connect this VM:"
          sudo tailscale up --hostname=github-vm --accept-routes --ssh
          echo "✅ Tailscale started. Once logged in, this VM will join your network."

      - name: 🖥️ Launching Windows 11 VM
        run: |
          echo "🚀 Starting Windows 11 Virtual Machine..."
          cd $HOME/vm
          if [ -c /dev/kvm ]; then
            echo "💡 KVM detected → using hardware acceleration"
            KVM_FLAG="-enable-kvm -cpu host,kvm=on"
          else
            echo "⚠️ KVM not available →
