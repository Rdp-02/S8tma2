name: Automated Windows Virtual Workspace (ngrok-in)

on:
  workflow_dispatch:
    inputs:
      windows_edition:
        description: "Windows Edition to Install"
        required: true
        type: choice
        options:
          - "Windows 10 Pro"
          - "Windows 10 Home"
          - "Windows 11 Pro"
          - "Windows 11 Home"
      admin_password:
        description: "Admin Password (min 8 chars)"
        required: true
        type: string
      iso_url:
        description: "Direct ISO link for Windows"
        required: true
        default: ""

jobs:
  run-vm:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚úÖ Validate Inputs
        run: |
          if [ ${#ADMIN_PASSWORD} -lt 8 ]; then
            echo "‚ùå Password must be at least 8 characters"
            exit 1
          fi
          echo "‚úÖ Inputs validated"
          echo "Edition: ${{ github.event.inputs.windows_edition }}"
          echo "Password length: ${#ADMIN_PASSWORD}"
        env:
          ADMIN_PASSWORD: ${{ github.event.inputs.admin_password }}

      - name: üß© Initializing Environment
        run: |
          echo "üîß Preparing Your Virtual Workspace (4 Cores ‚Ä¢ 16 GB RAM ‚Ä¢ 256 GB SSD)"
          sudo apt-get update -qq
          sudo apt-get install -y qemu-system qemu-utils wget curl unzip mtools
          mkdir -p $HOME/vm
          echo "‚úÖ Environment initialized."

      - name: üíæ Downloading ISO
        run: |
          echo "üì¶ Downloading ISO from provided link..."
          cd $HOME/vm
          wget --timeout=300 --tries=3 -O os.iso "${{ github.event.inputs.iso_url }}"
          if [ ! -f os.iso ]; then
            echo "‚ùå ISO download failed"
            exit 1
          fi
          ls -lh os.iso
          echo "‚úÖ ISO downloaded successfully."

      - name: üíΩ Creating 256 GB Virtual Disk
        run: |
          echo "üíΩ Creating 256 GB disk..."
          cd $HOME/vm
          qemu-img create -f qcow2 vm.qcow2 256G
          ls -lh vm.qcow2
          echo "‚úÖ Disk created."

      - name: üíæ Creating Advanced Automated Install Floppy
        run: |
          echo "ü§ñ Creating autounattend.xml for ${{ github.event.inputs.windows_edition }}..."
          cd $HOME/vm
          
          python3 << 'PYTHON'
import base64
import sys

# Get environment variables
windows_edition = "${{ github.event.inputs.windows_edition }}"
admin_password = "${{ github.event.inputs.admin_password }}"

# Map edition to Windows image name
edition_map = {
    "Windows 10 Pro": "Windows 10 Pro",
    "Windows 10 Home": "Windows 10 Home",
    "Windows 11 Pro": "Windows 11 Pro",
    "Windows 11 Home": "Windows 11 Home"
}

image_name = edition_map.get(windows_edition, "Windows 10 Pro")

# Encode password for XML (base64)
password_encoded = base64.b64encode(admin_password.encode('utf-16-le')).decode('ascii')

xml_content = f'''<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend">
    <settings pass="windowsPE">
        <component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <SetupUILanguage>
                <UILanguage>en-US</UILanguage>
            </SetupUILanguage>
            <InputLocale>en-US</InputLocale>
            <SystemLocale>en-US</SystemLocale>
            <UILanguage>en-US</UILanguage>
            <UserLocale>en-US</UserLocale>
        </component>
        <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <DiskConfiguration>
                <Disk wcm:action="add">
                    <CreatePartitions>
                        <CreatePartition wcm:action="add">
                            <Order>1</Order>
                            <Type>System</Type>
                            <Size>500</Size>
                        </CreatePartition>
                        <CreatePartition wcm:action="add">
                            <Order>2</Order>
                            <Type>Primary</Type>
                            <Extend>true</Extend>
                        </CreatePartition>
                    </CreatePartitions>
                    <ModifyPartitions>
                        <ModifyPartition wcm:action="add">
                            <Order>1</Order>
                            <PartitionID>1</PartitionID>
                            <Label>System</Label>
                            <Format>NTFS</Format>
                            <TypeID>0xDE94BBA4A374D611A78F00A0C9223196</TypeID>
                        </ModifyPartition>
                        <ModifyPartition wcm:action="add">
                            <Order>2</Order>
                            <PartitionID>2</PartitionID>
                            <Letter>C</Letter>
                            <Format>NTFS</Format>
                            <Label>Windows</Label>
                        </ModifyPartition>
                    </ModifyPartitions>
                    <DiskID>0</DiskID>
                    <WillWipeDisk>true</WillWipeDisk>
                </Disk>
            </DiskConfiguration>
            <ImageInstall>
                <OSImage>
                    <InstallFrom>
                        <MetaData wcm:action="add">
                            <Key>/IMAGE/NAME</Key>
                            <Value>{image_name}</Value>
                        </MetaData>
                    </InstallFrom>
                    <InstallTo>
                        <DiskID>0</DiskID>
                        <PartitionID>2</PartitionID>
                    </InstallTo>
                    <InstallToAvailablePartition>false</InstallToAvailablePartition>
                </OSImage>
            </ImageInstall>
            <UserData>
                <ProductKey>
                    <Key/>
                </ProductKey>
                <AcceptEula>true</AcceptEula>
                <FullName>Administrator</FullName>
                <Organization>GitHub</Organization>
            </UserData>
            <EnableFirewall>true</EnableFirewall>
        </component>
    </settings>
    <settings pass="specialize">
        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <ComputerName>GITHUB-VM</ComputerName>
            <TimeZone>UTC</TimeZone>
            <RegisteredOwner>Administrator</RegisteredOwner>
            <RegisteredOrganization>GitHub Actions</RegisteredOrganization>
        </component>
        <component name="Microsoft-Windows-ServerManager-Sconfig" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <DoNotOpenServerManagerAtLogon>true</DoNotOpenServerManagerAtLogon>
        </component>
    </settings>
    <settings pass="oobeSystem">
        <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
            <AutoLogon>
                <Password>
                    <Value>{admin_password}</Value>
                    <PlainText>true</PlainText>
                </Password>
                <Enabled>true</Enabled>
                <LogonCount>999</LogonCount>
                <Username>Administrator</Username>
            </AutoLogon>
            <OOBE>
                <HideEULAPage>true</HideEULAPage>
                <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>
                <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
                <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
                <NetworkLocation>Work</NetworkLocation>
                <ProtectYourPC>1</ProtectYourPC>
                <SkipMachineOOBE>true</SkipMachineOOBE>
                <SkipUserOOBE>true</SkipUserOOBE>
            </OOBE>
            <UserAccounts>
                <LocalAccounts>
                    <LocalAccount wcm:action="add">
                        <Password>
                            <Value>{admin_password}</Value>
                            <PlainText>true</PlainText>
                        </Password>
                        <Description>Administrator Account</Description>
                        <DisplayName>Administrator</DisplayName>
                        <Group>Administrators</Group>
                        <Name>Administrator</Name>
                    </LocalAccount>
                </LocalAccounts>
            </UserAccounts>
            <FirstLogonCommands>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>cmd /c "REG ADD \"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f"</CommandLine>
                    <Description>Enable RDP</Description>
                    <Order>1</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>cmd /c "REG ADD \"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 2 /f"</CommandLine>
                    <Description>Configure RDP Security</Description>
                    <Order>2</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>cmd /c "REG ADD \"HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp\" /v UserAuthentication /t REG_DWORD /d 1 /f"</CommandLine>
                    <Description>Enable NLA for RDP</Description>
                    <Order>3</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>powershell -Command "New-NetFirewallRule -DisplayName 'Allow RDP' -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -Profile Any"</CommandLine>
                    <Description>Enable RDP Firewall Rule</Description>
                    <Order>4</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>powershell -Command "Get-NetAdapter | Set-NetIPInterface -Dhcp Enabled; Get-NetAdapter | Set-DnsClientServerAddress -ResetServerAddresses"</CommandLine>
                    <Description>Enable DHCP and DNS</Description>
                    <Order>5</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>powershell -Command "Disable-NetAdapterBinding -Name '*' -ComponentID ms_tcpip6"</CommandLine>
                    <Description>Disable IPv6</Description>
                    <Order>6</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
                <SynchronousCommand wcm:action="add">
                    <CommandLine>cmd /c "wmic useraccount where name=\"Administrator\" set PasswordExpires=FALSE"</CommandLine>
                    <Description>Disable Password Expiration</Description>
                    <Order>7</Order>
                    <RequiresUserInput>false</RequiresUserInput>
                </SynchronousCommand>
            </FirstLogonCommands>
        </component>
    </settings>
</unattend>'''

with open('autounattend.xml', 'w') as f:
    f.write(xml_content)

print("‚úÖ Advanced XML configuration created")
print(f"Edition: {image_name}")
print(f"Admin User: Administrator")
print(f"Auto-login: Enabled")
print(f"RDP: Will be enabled on first boot")
PYTHON

          echo "üíø Creating floppy disk image..."
          qemu-img create -f raw floppy.img 1.44M
          sudo mkfs.vfat floppy.img
          sudo mcopy -i floppy.img autounattend.xml ::/
          sudo chmod 666 floppy.img
          ls -lh floppy.img
          echo "‚úÖ Floppy created with answer file."

      - name: üåê Setting Up ngrok (India Region)
        env:
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        run: |
          if [ -z "$NGROK_AUTH_TOKEN" ]; then
            echo "‚ùå Error: NGROK_AUTH_TOKEN secret is not set."
            echo "Please add your ngrok authtoken as a repository secret."
            exit 1
          fi
          
          echo "üîê Installing ngrok..."
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt-get update -qq
          sudo apt-get install -y ngrok
          
          echo "üîë Authenticating ngrok..."
          ngrok config add-authtoken "$NGROK_AUTH_TOKEN"
          
          echo "üîó Starting ngrok tunnels in Indian (in) region..."
          nohup ngrok tcp --region in 5901 > $HOME/vm/ngrok-vnc.log 2>&1 &
          sleep 2
          nohup ngrok tcp --region in 3389 > $HOME/vm/ngrok-rdp.log 2>&1 &
          sleep 2
          
          echo "‚úÖ ngrok setup done."

      - name: üñ•Ô∏è Launching VM
        run: |
          echo "üöÄ Booting Virtual Machine..."
          cd $HOME/vm
          
          nohup sudo qemu-system-x86_64 \
            -enable-kvm \
            -cpu host,kvm=on \
            -m 16G \
            -smp 4,sockets=1,cores=4,threads=1 \
            -drive file=vm.qcow2,format=qcow2,if=ide \
            -cdrom os.iso \
            -fda floppy.img \
            -vga qxl \
            -display vnc=:1 \
            -device qemu-xhci,id=xhci \
            -device usb-tablet,bus=xhci.0 \
            -netdev user,id=n0,hostfwd=tcp::3389-:3389,hostfwd=tcp::5901-:5901 \
            -device e1000,netdev=n0 \
            -daemonize > $HOME/vm/qemu.log 2>&1
          
          sleep 5
          echo "‚úÖ VM is running."
          echo "üîç QEMU processes:"
          ps aux | grep qemu | grep -v grep

      - name: üìã Displaying Access Details
        run: |
          echo "‚è≥ Waiting 20 seconds for ngrok tunnels to establish..."
          sleep 20
          
          ADMIN_PASS="${{ github.event.inputs.admin_password }}"
          EDITION="${{ github.event.inputs.windows_edition }}"
          
          echo ""
          echo "======================================================================"
          echo "‚úÖ YOUR AUTOMATED WINDOWS SETUP IS STARTING!"
          echo "======================================================================"
          echo ""
          echo "üì¶ INSTALLATION DETAILS:"
          echo "   ‚Ä¢ Edition: $EDITION"
          echo "   ‚Ä¢ Installation Method: Fully Automated"
          echo "   ‚Ä¢ RDP: Auto-enabled on first boot"
          echo ""
          echo "üìä VM SPECIFICATIONS:"
          echo "   ‚Ä¢ CPU: 4 cores"
          echo "   ‚Ä¢ RAM: 16 GB"
          echo "   ‚Ä¢ Storage: 256 GB"
          echo ""
          echo "üîê LOGIN CREDENTIALS:"
          echo "   ‚Ä¢ Username: Administrator"
          echo "   ‚Ä¢ Password: (Your specified password)"
          echo "   ‚Ä¢ Auto-login: Enabled"
          echo ""
          echo "üåê REMOTE ACCESS:"
          echo "   ‚Ä¢ RDP Port: 3389"
          echo "   ‚Ä¢ VNC Port: 5901"
          echo ""
          echo "üìç NGROK TUNNELS:"
          echo "   View your public addresses at:"
          echo "   https://dashboard.ngrok.com/cloud-edge/endpoints"
          echo ""
          echo "‚ö†Ô∏è  INSTALLATION TIMELINE:"
          echo "   ‚Ä¢ 0-5 min: Boot and partition setup"
          echo "   ‚Ä¢ 5-15 min: Windows file extraction"
          echo "   ‚Ä¢ 15-25 min: System configuration"
          echo "   ‚Ä¢ 25-30 min: RDP and final setup"
          echo ""
          echo "üìù NGROK VNC LOG:"
          echo "----"
          cat $HOME/vm/ngrok-vnc.log 2>/dev/null || echo "Not ready yet..."
          echo ""
          echo "üìù NGROK RDP LOG:"
          echo "----"
          cat $HOME/vm/ngrok-rdp.log 2>/dev/null || echo "Not ready yet..."
          echo ""
          echo "======================================================================"

      - name: ‚è≥ Keeping VM Active (6 Hours)
        run: |
          echo "üïê Starting 6-hour session timer..."
          echo "Edition: ${{ github.event.inputs.windows_edition }}"
          echo ""
          
          start_time=$(date +%s)
          end_time=$((start_time + 21600))  # 6 hours in seconds
          
          while [ $(date +%s) -lt $end_time ]; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            remaining=$((end_time - current_time))
            
            elapsed_min=$((elapsed / 60))
            remaining_min=$((remaining / 60))
            
            printf "\r‚è≥ Session: %3d min elapsed | %3d min remaining | Status: ACTIVE" "$elapsed_min" "$remaining_min"
            sleep 60
          done
          
          echo -e "\n\n‚úÖ 6-hour session complete!"
          echo "üõë Virtual workspace will now shut down..."

      - name: üõë Cleanup & Shutdown
        if: always()
        run: |
          echo "üßπ Cleaning up resources..."
          
          echo "Stopping QEMU..."
          sudo pkill -9 qemu-system 2>/dev/null || true
          sleep 2
          
          echo "Stopping ngrok..."
          sudo pkill -9 ngrok 2>/dev/null || true
          sleep 2
          
          echo "Removing temporary files..."
          cd $HOME/vm
          rm -f os.iso vm.qcow2 floppy.img autounattend.xml
          
          echo "‚úÖ Cleanup complete"
          echo ""
          echo "üéâ Workflow completed successfully!"
